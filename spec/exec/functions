#!/usr/bin/env bash

export DEBIAN_FRONTEND=noninteractive
export PATH=$PATH:/usr/local/bundle/bin

exec_cmd() {
    echo "$1";

    if [ -z $2 ]; then
        eval "$1; ret=\$?"
    else
        eval "$1 | tee -a $2; ret=\${PIPESTATUS[0]}"
    fi

    if [ -z $3 ]; then
        checkr=0
    else
        checkr=$3
    fi

    if [ $ret -ne $checkr ]; then
        echo "RET: $ret"
        exit 1
    fi
}

parse_exec_args() {
    echo "Exec args from: $1"
    cat $1
    source $1
}

show_exec_boundary() {
    echo "=~=~=~=" | tee -a $1
}

detect_and_adjust_for_ruby19() {
    if [[ $(ruby -v) =~ ^ruby.1\.9.* ]]; then
        echo "Detected legacy ruby 1.9, making adjustments..."

        exec_cmd "gem update --system=2.7.8"
        exec_cmd "gem -v"
        exec_cmd "gem install bundler -v 1.17.3"
    fi
}

detect_if_debian_wheezy() {
    if [[ -f /etc/debian_version ]]; then
        debian_version=$(cat /etc/debian_version)

        if [[ "$debian_version" == "7."* ]]; then
            echo "Detected Debian wheezy, making adjustments..."

            cat >/etc/apt/sources.list <<EOF
deb http://archive.debian.org/debian/ wheezy main contrib non-free
EOF
        fi
    fi
}

configure_furynix_token() {
    if [ -z $furynix_user ]; then
        furynix_user=furynix
    fi

    cat >~/.netrc <<EOF
machine api.fury.io
  login $furynix_user
  password $furynix_token
machine git.fury.io
  login $furynix_user
  password $furynix_token
machine push.fury.io
  login $furynix_user
  password $furynix_token
machine go-proxy.fury.io
  login $furynix_token
  password NOPASS
EOF
    chmod 0600 ~/.netrc
    cat ~/.netrc

    mkdir -p ~/.gem
    cat >~/.gem/credentials <<EOF
---
:fury: $furynix_token
EOF
    chmod 0600 ~/.gem/credentials

    export FURYNIX_API_TOKEN="$furynix_token"
    export FURYNIX_USER="$furynix_user"
}

prepare_apt() {
    fury_list="deb [trusted=yes] $source /"

    if [[ -n $(which apt) ]]; then
        export apt="apt"
    else
        export apt="apt-get"
    fi

    dpkg -l apt-transport-https
    if [ "$?" -eq '1' ]; then
        exec_cmd "$apt -y update"
        exec_cmd "$apt install -y ca-certificates apt-transport-https"
    fi

    exec_cmd "echo $fury_list | tee /etc/apt/sources.list.d/fury.list"
    exec_cmd "$apt -y update"
}

prepare_yum() {
    cat >/etc/yum.repos.d/fury.repo <<EOF
[fury]
name=Gemfury Private Repo
baseurl=$source
enabled=1
gpgcheck=0
EOF
}

prepare_nuget() {
    if [[ -f /usr/local/bin/nuget.exe ]]; then
        export nuget="mono /usr/local/bin/nuget.exe"
    else
        export nuget="nuget"
    fi
}

prepare_maven() {
    mkdir -p ~/.m2
    cat >~/.m2/settings.xml <<EOF
<settings xmlns="http://maven.apache.org/SETTINGS/1.1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
  <servers>
    <server>
      <id>$FURYNIX_MAVEN_REPO_ID</id>
      <username>$FURYNIX_API_TOKEN</username>
      <password>.</password>
      <configuration>
        <httpConfiguration>
          <all>
            <usePreemptive>true</usePreemptive>
          </all>
        </httpConfiguration>
      </configuration>
    </server>
  </servers>
</settings>
EOF

    cat ~/.m2/settings.xml
}

# credit from: https://stackoverflow.com/a/10660730/109165
rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
        c=${string:$pos:1}
        case "$c" in
            [-_.~a-zA-Z0-9] ) o="${c}" ;;
            * )               printf -v o '%%%02x' "'$c"
        esac
        encoded+="${o}"
    done

    echo "${encoded}"
    REPLY="${encoded}"
}
